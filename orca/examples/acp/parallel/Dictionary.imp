# ========================================================================
# == File:      Dictionary.imp						==
# == Program:   Active Chart Parser					==
# == Author:    Anil Sukul - Vrije Universiteit Amsterdam - 1994    	==
# == Contains:  implementation of dictionary operatoins			==
# ========================================================================
MODULE IMPLEMENTATION Dictionary;

FROM StringObject IMPORT compare_string;
FROM Types        IMPORT word_t, symbol_name_t;
FROM Symbollist   IMPORT create_sl, delete_sl, insert_elt_sl;



# ========================================================================
# == functions								==
# ========================================================================

#
# create() : create the dictionary
#
FUNCTION create_dict(
	dictionary   : SHARED dictionary_t	# the dictionary
) : boolean;					# succes?

BEGIN
	dictionary.head := NIL;
	dictionary.tail := NIL;
	dictionary.nr_elts := 0;

	RETURN true;
END;


#
# delete : delete the dictionary
#
FUNCTION delete_dict(
	dictionary   : SHARED dictionary_t 	# the dictionary
);

	old_elt : dict_node_t;			# node to be deleted
BEGIN
	FOR i IN 1..dictionary.nr_elts DO
		old_elt := dictionary.head;
		dictionary.head := dictionary[dictionary.head].next;
		delete_sl(dictionary[old_elt].symbol_list);
		DELETENODE(dictionary, old_elt);
	OD;
END;


#
# insert_word() : insert a word in the dictionary
#
FUNCTION insert_word_dict(
	dictionary   : SHARED dictionary_t;	# the dictionary
	word	     : word_t; 			# word to be inserted
	non_terminal : symbol_name_t		# non_terminal generating this word
) : boolean;

	new_elt, ptr : dict_node_t;		# pointers to nodes
	index : integer;			# loop var
BEGIN
	IF is_in_dict(dictionary, word, index) THEN
		ptr := dictionary.head;
		FOR i IN 1..(index-1) DO
			ptr := dictionary[ptr].next;
		OD;
		
		RETURN insert_elt_sl(dictionary[ptr].symbol_list, non_terminal);
	ELSE
		new_elt := ADDNODE(dictionary);
		dictionary[new_elt].word := word;
		IF NOT (create_sl(dictionary[new_elt].symbol_list) AND
			insert_elt_sl(dictionary[new_elt].symbol_list, non_terminal)) THEN
			RETURN false;
		FI;
		dictionary[new_elt].next := NIL;

		IF (dictionary.nr_elts = 0) THEN	
			dictionary.head := new_elt;
			dictionary.tail := new_elt;
			dictionary.nr_elts +:= 1;
			RETURN true;
		FI;
		
		ptr := dictionary.head;

		# should we insert as first element?
		IF (compare_string(dictionary[ptr].word, word) >= 0) THEN
			dictionary[new_elt].next := dictionary.head;
			dictionary.head := new_elt;
			dictionary.nr_elts +:= 1;
			RETURN true;
		FI;

		# insert at correct position
		WHILE (dictionary[ptr].next /= NIL) DO
			IF (compare_string(dictionary[dictionary[ptr].next].word, word) >= 0) THEN
				dictionary[new_elt].next := dictionary[ptr].next;
				dictionary[ptr].next := new_elt;
				dictionary.nr_elts +:= 1;
        	        	RETURN true;
			FI;
			ptr := dictionary[ptr].next;
	        OD;
	
		# insert as new tail
		dictionary[dictionary.tail].next := new_elt;
		dictionary.tail := new_elt;
		dictionary.nr_elts +:= 1;	
	FI;
	RETURN true;
END;



FUNCTION num_elts_dict(
	dictionary   : dictionary_t		# the dictionary
) : integer;					# number of elements in the dictionary

BEGIN
	RETURN dictionary.nr_elts;
END;


FUNCTION give_ith_elt_dict(
	dictionary   : dictionary_t;		# the dictionary
	index 	     : integer; 		# index in the list
	word  	     : OUT word_t; 		# word on position i
	symbol_list  : SHARED dict_node_t	# symbol_list on position i
) : boolean;

	ptr : dict_node_t;			# pointer to node
BEGIN
	IF ((index < 1) OR (index > dictionary.nr_elts)) THEN
		RETURN false;
	FI;
	
	ptr := dictionary.head;
	
	FOR i IN 1..(index-1) DO
		ptr := dictionary[ptr].next;
	OD;
	
	word := dictionary[ptr].word;
	symbol_list := ptr;	

	RETURN true;
END;
	


FUNCTION is_in_dict(
	dictionary   : dictionary_t;		# the dictionary
	word 	     : word_t; 			# word to be checked for
	index        : OUT integer		# position of in list
) : boolean;					# is the word in the list?
		
	ptr : dict_node_t;			# pointer to list elt
	cmp : integer;				# result of comparison
BEGIN
	ptr := dictionary.head;

	FOR i IN 1.. dictionary.nr_elts DO
		cmp := compare_string(dictionary[ptr].word, word);

		#list is sorted, so check if we can break
		IF (cmp > 0) THEN
			RETURN false;
		FI;
	
		IF (cmp = 0) THEN
			index := i;
			RETURN true;
		FI;
		ptr := dictionary[ptr].next;
	OD;
	RETURN false;
END;
		
END;
