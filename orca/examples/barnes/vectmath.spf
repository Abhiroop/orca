MODULE SPECIFICATION vectmath;

CONST NDIM = 3;
CONST NSUB = 1 << NDIM;

TYPE Vectmath = ARRAY[integer 0.. NDIM - 1] OF real;
TYPE matrix = ARRAY[integer 0.. NDIM - 1, integer 0..NDIM -1] OF real;

FUNCTION  CLRV(v: SHARED Vectmath);             # CLeaR Vector                
#FUNCTION UNITV(v: SHARED Vectmath;j: integer);  # UNIT Vector 
FUNCTION ADDV(v: SHARED Vectmath;u,w:Vectmath);          # ADD Vector
FUNCTION Addv( cmv, cmr: SHARED Vectmath; vel, pos:Vectmath);          # ADD Vector
FUNCTION Sub_Mulv( dvel : SHARED Vectmath; x, y : Vectmath);
FUNCTION Mul_Sub( x : SHARED Vectmath; y : Vectmath; z : real);
FUNCTION Mul_Add( x : SHARED Vectmath; y : Vectmath; z : real);
FUNCTION ADDVSame(v: SHARED Vectmath;w:Vectmath);          # ADD Vector
FUNCTION SUBV(v: SHARED Vectmath;u,w:Vectmath);          # SUBstract Vector
FUNCTION SUBVSame(v: SHARED Vectmath;w:Vectmath);          # SUBstract Vector
FUNCTION MULVS(v: SHARED Vectmath;u:Vectmath;s:real); # MULtiply Vector
FUNCTION Mulvs( v: SHARED Vectmath; u:Vectmath; s:real); # MULtiply Vector
FUNCTION MULVSSame(v: SHARED Vectmath;s:real); # MULtiply Vector
                                               # by Scalar 
FUNCTION DIVVS(v: SHARED Vectmath;u:Vectmath;s:real); # DIVide Vector by Scalar
FUNCTION DIVVSSame(v: SHARED Vectmath;s:real); # DIVide Vector by Scalar
FUNCTION DOTVP(v,u: Vectmath): real; # DOT Vector Product 
FUNCTION DOTVPSame(u: SHARED Vectmath): real; # DOT Vector Product 
FUNCTION CROSSVP(v: SHARED Vectmath;u,w:Vectmath);       # CROSS Vector 
                                                         # Product

FUNCTION CLRM(p: SHARED matrix);                # CLeaR Matrix 
FUNCTION SETMI(p: SHARED matrix);               # SET Matrix to Identity
FUNCTION SETM(p: SHARED matrix; q : matrix);               # SET Matrix to Identity
FUNCTION ADDM(p: SHARED matrix;q,r:matrix);            # ADD Matrix
FUNCTION ADDMSame(p: SHARED matrix;r:matrix);            # ADD Matrix
FUNCTION SUBM(p: SHARED matrix;q,r:matrix);            # SUBtract Matrix 
FUNCTION SUBMSame(p: SHARED matrix;r:matrix);            # ADD Matrix
FUNCTION MULM(p: SHARED matrix;q,r:matrix);            # Multiply Matrix
FUNCTION MULMS(p: SHARED matrix;q:matrix;s: real);     # MULtiply Matrix by
                                                       # Scalar 
FUNCTION MULMSSame(p: SHARED matrix;s: real);     # MULtiply Matrix by
                                                       # Scalar
FUNCTION MULMV(v: SHARED Vectmath;p: matrix;u: Vectmath);
                                               # MULtiply Matrix by Vector 

FUNCTION OUTVP(p: SHARED matrix;v,u:Vectmath); # OUTer Vector Product
FUNCTION OUTVPSame(p: SHARED matrix;v:Vectmath); # OUTer Vector Product
FUNCTION SETVS(v: SHARED Vectmath;s: real);    # SET Vector to Scalar 
FUNCTION ADDVS(v: SHARED Vectmath;u:Vectmath;s: real); # ADD Vector and Scalar 
FUNCTION ADDVSSame(v: SHARED Vectmath;s: real); # ADD Vector and Scalar 

FUNCTION PRTV(vec: Vectmath);    # PRinT Vector

END;





