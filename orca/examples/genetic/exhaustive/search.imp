MODULE IMPLEMENTATION search;

	FROM GenTypes IMPORT PPCom, configuration;
	FROM BoolVector IMPORT BoolMatrix;
	FROM CromoVector IMPORT individual, DynIndividual;
	FROM Finish IMPORT Finish;
	IMPORT IntObject;
	FROM Time IMPORT SysMilli, PrintTime;
	FROM args IMPORT Argc, Argv;
	FROM input_data IMPORT read_configuration, print_configuration,
				read_matrix, print_matrix;
	FROM output_solution IMPORT write_solution;
	FROM lexicographic IMPORT initindividual, nextindividual;
	FROM matrixfunct IMPORT test_symmetric, evaluation;
	IMPORT sem;

PROCESS worker(G: BoolMatrix; nb_nodes: integer;
			symmetric: boolean;
			Com: SHARED PPCom;
			WorkersActive: SHARED IntObject;
			go: SHARED IntObject; printer: SHARED sem);

# local data of the worker
	Ind, tmpind: individual;
	count: integer;

BEGIN
	go$AwaitValue(1);

printer$P();
	WriteLine("***Process*** ", MYCPU());
printer$V();

	Ind := DynIndividual(nb_nodes);
	tmpind := DynIndividual(nb_nodes);
	initindividual (Ind, nb_nodes);
	evaluation(G, symmetric, nb_nodes, Ind);
	tmpind := Ind;
	count := 1;
	WHILE nextindividual(tmpind, nb_nodes) DO
	count +:= 1;
		IF tmpind.eval < Ind.eval THEN
			Ind := tmpind;
		FI;
	OD;
printer$P();
	WriteLine("Total number of explored individuals = ", count);
printer$V();
      	Com$put(Ind);
	WorkersActive$dec();
END;


PROCESS OrcaMain();
	# local data of the Main
		G: BoolMatrix;
		config: configuration;
		nb_nodes: integer;
		solution: individual;
		symmetric: boolean;
		start, stop: integer;

	# (shared) objects
		Com: PPCom;
		WorkersActive: IntObject;	# for termination detection
		go: IntObject;			# for start synchronization
		printer: sem;

BEGIN
	IF Argc() /= 2 THEN
	  WriteLine("Usage: ", Argv(0), " name of the matrix file");
	  RETURN;
	FI;
	WriteLine ("Main started");

# init config
	IF NOT read_configuration (config) THEN
		WriteLine("Error configuration file read");
		RETURN;
	FI;	
	print_configuration(config);
	config.nb_individuals /:= NCPUS();
	IF config.nb_individuals%2 /= 0 THEN
		config.nb_individuals +:= 1;
	FI;
	WriteLine();
	WriteLine("Sub-population size= ", config.nb_individuals);

	WriteLine();
	WriteLine("Matrix file name: ", Argv(1));

# init graph
	IF NOT read_matrix (Argv(1), nb_nodes, G) THEN
		WriteLine("Error matrix file read");
		RETURN;
	FI;
	print_matrix (nb_nodes, G);
	WriteLine ();
	symmetric := test_symmetric(G, nb_nodes);
	IF symmetric THEN
		WriteLine ("symmetric matrix");
	ELSE
		WriteLine ("non-symmetric matrix");
	FI;
 
# init communication buffer Com
	solution := DynIndividual(nb_nodes);
	Com$put(solution);
	Com$get(solution);	

# start slaves
		start := SysMilli();
		WorkersActive$assign(NCPUS());
		go$assign(0);
		FOR i IN 0 .. NCPUS()-1 DO
			FORK worker(G, nb_nodes, symmetric, Com, WorkersActive, go, printer) ON (i);
		OD;
		go$assign(1);
		WorkersActive$AwaitValue(0);
		stop := SysMilli();
		Com$get(solution);
		WriteLine("Result = ");
		write_solution(nb_nodes, solution);
		PrintTime("Genetic, exhaustive version", stop-start);
		WriteLine("Job done!!!");
		Finish();
	END;
END;








