# (c) copyright 1995 by the Vrije Universiteit, Amsterdam, The Netherlands.
# For full copyright and restrictions on use see the file COPYRIGHT in the
# top level of the Orca distribution.

GENERIC
OBJECT IMPLEMENTATION JobQueue;
# This implementation contains support for a distributed job queue: Jobs
# can be dequeued in LIFO (local) or FIFO (remote) order.

	TYPE Queue = ARRAY [integer] OF T;

	Q: Queue;                 # the queue itself
	size : integer;		  # size of the queue
	next : integer;		  # index to the back of the queue
	first : integer;	  # index to the front of the queue
	n : integer;		  # number of elements in the queue


	work : integer;		  # global variables for termination detection
	idle : integer;
	finished : integer;


	FUNCTION alloc( size : integer) : Queue;
		b : Queue[1..size];
	BEGIN
		RETURN b;
	END;


	OPERATION AddJob(job: T);
		tmp : Queue;
	BEGIN
		IF n = size THEN
			# doubling a cyclic buffer is a bit difficult
			tmp := alloc( 2*size);
			FOR i IN first .. size DO
				tmp[i-first+1] := Q[i];
			OD;
			FOR i IN 1 .. first-1 DO
				tmp[i-first+1+size] := Q[i];
			OD;
			first := 1;
			next := size+1;
			Q := tmp;
			size *:= 2;
		FI;

		Q[next] := job;
		next +:= 1;
		IF next > size THEN
			next := 1;
		FI;
		n +:= 1;
	END;

	OPERATION GetJob(job: OUT T): boolean;
	BEGIN  # Try to fetch a job from the queue (LIFO)
		IF n > 0 THEN  # A job is available
			next -:= 1;
			IF next = 0 THEN
				next := size;
			FI;
			job := Q[next];
			n -:= 1;
			RETURN true;
		ELSE
			RETURN false; # All local jobs have been done
		FI;
	END;

	OPERATION TryGetJob(job: OUT T): boolean;
	BEGIN  # Try to fetch a job from the queue (FIFO)
		IF n > 0 THEN  # A job is available
			job := Q[first];
			first +:= 1;
			IF first > size THEN
				first := 1;
			FI;
			n -:= 1;
			RETURN true;
		ELSE
			RETURN false;
		FI;
	END;


	OPERATION Announce();
	BEGIN
		GUARD idle <= work DO OD;	# Nobody interested?

		GUARD (idle > work) AND (finished = 0) DO	# reentrant code
                        # Let all idle workers loose, since it is unknow
                        # who will poll "my" queue.
                        # work +:= 1;
                        work := idle;
		OD;
	END;

	OPERATION Idle();
	BEGIN
		GUARD finished = 0 DO		# reentrant code
			idle +:= 1;
		OD;
	END;

	OPERATION AllDone() : boolean;
	BEGIN
		GUARD (idle = NCPUS()) AND (work = 0) DO
			finished +:= 1;
			IF finished = NCPUS() THEN
				idle := 0;
				finished := 0;
			FI;
			RETURN true;
		OD;

		GUARD work > 0 DO
			work -:= 1;
			idle -:= 1;
			RETURN false;
		OD;
	END;

BEGIN
	size := 10;
	Q := alloc(size);
	n := 0;
	next := 1;
	first := 1;
 
        work := 0;
        idle := 0;
        finished := 0;
END GENERIC;
