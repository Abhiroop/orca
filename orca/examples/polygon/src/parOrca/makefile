## The different parallel versions

OUT		+= parDivideBCastLSDOnceInNoOutOverlay
OUT		+= parDivideBCastLSDOnceInOverlay
OUT		+= parDivideBCastMergeLSDOnceInNoOutOverlay
OUT		+= parDivideBCastOnceInNoOutOverlay
OUT		+= parDivideBCastOnceInOverlay
OUT		+= parPatchDFLSDOnceInNoOutOverlay
OUT		+= parPatchDFLSDOnceInOverlay
OUT		+= parPatchDFOnceInNoOutOverlay
OUT		+= parPatchDFOnceInOverlay
OUT		+= parPatchLSDOnceInNoOutOverlay
OUT		+= parPatchLSDOnceInOverlay
OUT		+= parPatchMostLSDOnceInNoOutOverlay
OUT		+= parPatchMostLSDOnceInOverlay
OUT		+= parPatchOnceInNoOutOverlay
OUT		+= parPatchOnceInOverlay

#OUT		+= parDivideBCastLSDOverlay
#OUT		+= parDivideBCastOverlay
#OUT		+= parDivideLSDOnceInNoOutOverlay
#OUT		+= parDivideLSDOnceInOverlay
#OUT		+= parDivideLSDOverlay
#OUT		+= parDivideMergeLSDOverlay
#OUT		+= parDivideOverlay
#OUT		+= parDivideSortOverlay
#OUT		+= parDivideSortWaitOverlay
#OUT		+= parPatchLSDOverlay
#OUT		+= parPatchMostLSDOverlay
#OUT		+= parPatchSortOverlay


## The conditional compiling constants.

#CPP_ALL_FLAGS			+= -DDEBUG
#CPP_ALL_FLAGS			+= -DTIMING_ESSENTIAL
CPP_ALL_FLAGS			+= -DTIMING_FULL

CPP_PANDA_TRACE_FLAGS		+= -DTIMING_TRACE
CPP_PANDA_TRACE_FLAGS		+= -DTRACE_LEVEL=10000


parDivideBCastLSDOnceInNoOutOverlayFLAGS	+= -DBROADCAST
parDivideBCastLSDOnceInNoOutOverlayFLAGS	+= -DDIVIDE
parDivideBCastLSDOnceInNoOutOverlayFLAGS	+= -DLSD
parDivideBCastLSDOnceInNoOutOverlayFLAGS	+= -DNO_OUTPUT
parDivideBCastLSDOnceInNoOutOverlayFLAGS	+= -DONCE_INPUT
parDivideBCastLSDOnceInNoOutOverlayFLAGS	+= -DQUICKSORT
parDivideBCastLSDOnceInNoOutOverlayFLAGS	+= -DSURFACE

parDivideBCastLSDOnceInOverlayFLAGS	+= -DBROADCAST
parDivideBCastLSDOnceInOverlayFLAGS	+= -DDIVIDE
parDivideBCastLSDOnceInOverlayFLAGS	+= -DLSD
parDivideBCastLSDOnceInOverlayFLAGS	+= -DONCE_INPUT
parDivideBCastLSDOnceInOverlayFLAGS	+= -DQUICKSORT
parDivideBCastLSDOnceInOverlayFLAGS	+= -DSURFACE

parDivideBCastLSDOverlayFLAGS	+= -DBROADCAST
parDivideBCastLSDOverlayFLAGS	+= -DDIVIDE
parDivideBCastLSDOverlayFLAGS	+= -DLSD
parDivideBCastLSDOverlayFLAGS	+= -DQUICKSORT
parDivideBCastLSDOverlayFLAGS	+= -DSURFACE

parDivideBCastOnceInNoOutOverlayFLAGS	+= -DBROADCAST
parDivideBCastOnceInNoOutOverlayFLAGS	+= -DDIVIDE
parDivideBCastOnceInNoOutOverlayFLAGS	+= -DNO_OUTPUT
parDivideBCastOnceInNoOutOverlayFLAGS	+= -DONCE_INPUT

parDivideBCastOnceInOverlayFLAGS	+= -DBROADCAST
parDivideBCastOnceInOverlayFLAGS	+= -DDIVIDE
parDivideBCastOnceInOverlayFLAGS	+= -DONCE_INPUT

parDivideBCastInOverlayFLAGS	+= -DBROADCAST
parDivideBCastInOverlayFLAGS	+= -DDIVIDE
parDivideBCastInOverlayFLAGS	+= -DONCE_INPUT

parDivideBCastMergeLSDOnceInNoOutOverlayFLAGS	+= -DBROADCAST
parDivideBCastMergeLSDOnceInNoOutOverlayFLAGS	+= -DDIVIDE
parDivideBCastMergeLSDOnceInNoOutOverlayFLAGS	+= -DLSD
parDivideBCastMergeLSDOnceInNoOutOverlayFLAGS	+= -DMERGESORT
parDivideBCastMergeLSDOnceInNoOutOverlayFLAGS	+= -DNO_OUTPUT
parDivideBCastMergeLSDOnceInNoOutOverlayFLAGS	+= -DONCE_INPUT
parDivideBCastMergeLSDOnceInNoOutOverlayFLAGS	+= -DSURFACE

parDivideLSDOnceInNoOutOverlayFLAGS	+= -DDIVIDE
parDivideLSDOnceInNoOutOverlayFLAGS	+= -DLSD
parDivideLSDOnceInNoOutOverlayFLAGS	+= -DNO_OUTPUT
parDivideLSDOnceInNoOutOverlayFLAGS	+= -DONCE_INPUT
parDivideLSDOnceInNoOutOverlayFLAGS	+= -DQUICKSORT
parDivideLSDOnceInNoOutOverlayFLAGS	+= -DSURFACE

parDivideLSDOnceInOverlayFLAGS	+= -DDIVIDE
parDivideLSDOnceInOverlayFLAGS	+= -DLSD
parDivideLSDOnceInOverlayFLAGS	+= -DONCE_INPUT
parDivideLSDOnceInOverlayFLAGS	+= -DQUICKSORT
parDivideLSDOnceInOverlayFLAGS	+= -DSURFACE

parDivideLSDOverlayFLAGS	+= -DDIVIDE
parDivideLSDOverlayFLAGS	+= -DLSD
parDivideLSDOverlayFLAGS	+= -DQUICKSORT
parDivideLSDOverlayFLAGS	+= -DSURFACE

parDivideMergeLSDOverlayFLAGS	+= -DDIVIDE
parDivideMergeLSDOverlayFLAGS	+= -DLSD
parDivideMergeLSDOverlayFLAGS	+= -DMERGESORT
parDivideMergeLSDOverlayFLAGS	+= -DSURFACE

parDivideOverlayFLAGS	+= -DDIVIDE

parDivideSortOverlayFLAGS	+= -DDIVIDE
parDivideSortOverlayFLAGS	+= -DQUICKSORT
parDivideSortOverlayFLAGS	+= -DSORT

parDivideSortWaitOverlayFLAGS	+= -DDIVIDE
parDivideSortWaitOverlayFLAGS	+= -DQUICKSORT
parDivideSortWaitOverlayFLAGS	+= -DSORT
parDivideSortWaitOverlayFLAGS	+= -DWAIT

parPatchDFLSDOnceInNoOutOverlayFLAGS	+= -DDUPLICATE_FILTER
parPatchDFLSDOnceInNoOutOverlayFLAGS	+= -DLSD
parPatchDFLSDOnceInNoOutOverlayFLAGS	+= -DNO_OUTPUT
parPatchDFLSDOnceInNoOutOverlayFLAGS	+= -DONCE_INPUT
parPatchDFLSDOnceInNoOutOverlayFLAGS	+= -DPATCH
parPatchDFLSDOnceInNoOutOverlayFLAGS	+= -DQUICKSORT
parPatchDFLSDOnceInNoOutOverlayFLAGS	+= -DSURFACE

parPatchDFLSDOnceInOverlayFLAGS	+= -DDUPLICATE_FILTER
parPatchDFLSDOnceInOverlayFLAGS	+= -DLSD
parPatchDFLSDOnceInOverlayFLAGS	+= -DONCE_INPUT
parPatchDFLSDOnceInOverlayFLAGS	+= -DPATCH
parPatchDFLSDOnceInOverlayFLAGS	+= -DQUICKSORT
parPatchDFLSDOnceInOverlayFLAGS	+= -DSURFACE

parPatchDFOnceInNoOutOverlayFLAGS	+= -DDUPLICATE_FILTER
parPatchDFOnceInNoOutOverlayFLAGS	+= -DNO_OUTPUT
parPatchDFOnceInNoOutOverlayFLAGS	+= -DONCE_INPUT
parPatchDFOnceInNoOutOverlayFLAGS	+= -DPATCH

parPatchDFOnceInOverlayFLAGS	+= -DDUPLICATE_FILTER
parPatchDFOnceInOverlayFLAGS	+= -DONCE_INPUT
parPatchDFOnceInOverlayFLAGS	+= -DPATCH

parPatchLSDOnceInNoOutOverlayFLAGS	+= -DLSD
parPatchLSDOnceInNoOutOverlayFLAGS	+= -DNO_OUTPUT
parPatchLSDOnceInNoOutOverlayFLAGS	+= -DONCE_INPUT
parPatchLSDOnceInNoOutOverlayFLAGS	+= -DPATCH
parPatchLSDOnceInNoOutOverlayFLAGS	+= -DQUICKSORT
parPatchLSDOnceInNoOutOverlayFLAGS	+= -DSURFACE

parPatchLSDOnceInOverlayFLAGS	+= -DLSD
parPatchLSDOnceInOverlayFLAGS	+= -DONCE_INPUT
parPatchLSDOnceInOverlayFLAGS	+= -DPATCH
parPatchLSDOnceInOverlayFLAGS	+= -DQUICKSORT
parPatchLSDOnceInOverlayFLAGS	+= -DSURFACE

parPatchLSDOverlayFLAGS		+= -DLSD
parPatchLSDOverlayFLAGS		+= -DPATCH
parPatchLSDOverlayFLAGS		+= -DQUICKSORT
parPatchLSDOverlayFLAGS		+= -DSURFACE

parPatchMostLSDOnceInNoOutOverlayFLAGS	+= -DLSD
parPatchMostLSDOnceInNoOutOverlayFLAGS	+= -DMOST_AREA
parPatchMostLSDOnceInNoOutOverlayFLAGS	+= -DNO_OUTPUT
parPatchMostLSDOnceInNoOutOverlayFLAGS	+= -DONCE_INPUT
parPatchMostLSDOnceInNoOutOverlayFLAGS	+= -DPATCH
parPatchMostLSDOnceInNoOutOverlayFLAGS	+= -DQUICKSORT
parPatchMostLSDOnceInNoOutOverlayFLAGS	+= -DSURFACE

parPatchMostLSDOnceInOverlayFLAGS	+= -DLSD
parPatchMostLSDOnceInOverlayFLAGS	+= -DMOST_AREA
parPatchMostLSDOnceInOverlayFLAGS	+= -DONCE_INPUT
parPatchMostLSDOnceInOverlayFLAGS	+= -DPATCH
parPatchMostLSDOnceInOverlayFLAGS	+= -DQUICKSORT
parPatchMostLSDOnceInOverlayFLAGS	+= -DSURFACE

parPatchMostLSDOverlayFLAGS	+= -DLSD
parPatchMostLSDOverlayFLAGS	+= -DMOST_AREA
parPatchMostLSDOverlayFLAGS	+= -DPATCH
parPatchMostLSDOverlayFLAGS	+= -DQUICKSORT
parPatchMostLSDOverlayFLAGS	+= -DSURFACE

parPatchOnceInNoOutOverlayFLAGS	+= -DNO_OUTPUT
parPatchOnceInNoOutOverlayFLAGS	+= -DONCE_INPUT
parPatchOnceInNoOutOverlayFLAGS	+= -DPATCH

parPatchOverlayFLAGS	+= -DPATCH

parPatchSortOverlayFLAGS	+= -DPATCH
parPatchSortOverlayFLAGS	+= -DQUICKSORT
parPatchSortOverlayFLAGS	+= -DSORT


## Files that need to be run trough $(CPP)

PRECPP		:sh= ls P.* 2> /dev/null


## Files that are created after they have been run trough $(CPP)

POSTCPP		= $(PRECPP:P.%=%)


## If these files change then recompile.

ORCADEPEND	:sh= for i in *.spf *.imp; do     \
		         if [ -f "P.$i" ]; then   \
			     echo "" > /dev/null; \
		         else                     \
			     echo "$i";           \
		         fi;                      \
		     done
ORCADEPEND	+= makefile


## Preprocessor

CPP		= cpp


## Orca compilers

OC_UNIX		= oc_unixproc

OC_BCAST	= oc_bcast-rpc
#OC_BCAST	= /usr/proj/orca/latest_greatest/bin/oc_bcast-rpc

OC_PANDA	= oc_panda
#OC_PANDA	= /usr/proj/orca/latest_greatest/bin/oc_panda

OC_PANDA_TRACE	= oc_panda
#OC_PANDA_TRACE	= /home/raoul/bin/sh/oc_trace


## Orca options
OC_CFLAGS       += -finline-functions
OC_CFLAGS       += -funroll-loops

OC_FLAGS	+= -CHK
OC_FLAGS	+= -LIN
OC_FLAGS	+= -O2
OC_FLAGS	+= --O
#OC_FLAGS	+= -g
#OC_FLAGS	+= -pg
OC_FLAGS	+= -v

OC_UNIX_FLAGS	+= $(OC_FLAGS)

OC_BCAST_FLAGS	+= -sparc
OC_BCAST_FLAGS	+= -opt
OC_BCAST_FLAGS	+= $(OC_FLAGS)

OC_PANDA_FLAGS	+= -amoeba
OC_PANDA_FLAGS	+= $(OC_FLAGS)

OC_PANDA_TRACE_FLAGS	+= -trc
OC_PANDA_TRACE_FLAGS	+= $(OC_PANDA_FLAGS)


## Makefile in which is dealt with preprocessing

PREPROCESSING_MAKEFILE = makefile


## Make overlay versions

SRC		= Main.imp

unix: $(OUT)
bcast: $(OUT:%=%.bcast)
panda: $(OUT:%=%.panda)
pandaTrace: $(OUT:%=%.panda.trace)

$(OUT):  $(ORCADEPEND)
	@ echo "#### $@ ####"
	@ $(MAKE) -f $(PREPROCESSING_MAKEFILE) PreClean
	@ $(MAKE) -f $(PREPROCESSING_MAKEFILE)        \
	       CPPFLAGS="$(CPP_ALL_FLAGS) $($@FLAGS)" \
	       Preprocessing
	$(OC_UNIX) $(OC_UNIX_FLAGS) -o $@ $(SRC)

$(OUT:%=%.bcast):  $(ORCADEPEND)
	@ echo "#### $@ ####"
	@ $(MAKE) -f $(PREPROCESSING_MAKEFILE) PreClean
	@ $(MAKE) -f $(PREPROCESSING_MAKEFILE)                     \
	       CPPFLAGS="$(CPP_ALL_FLAGS) $($(@:%.bcast=%)FLAGS)" \
	       Preprocessing
	$(OC_BCAST) $(OC_BCAST_FLAGS) -o $@ $(SRC)
	ainstall $@ /home/$@
	rm $@

$(OUT:%=%.panda):  $(ORCADEPEND)
	@ echo "#### $@ ####"
	@ $(MAKE) -f $(PREPROCESSING_MAKEFILE) PreClean
	@ $(MAKE) -f $(PREPROCESSING_MAKEFILE)               \
	  CPPFLAGS="$(CPP_ALL_FLAGS) $($(@:%.panda=%)FLAGS)" \
	       Preprocessing
	$(OC_PANDA) $(OC_PANDA_FLAGS) -o $@ $(SRC)
	ainstall $@ /home/$@
	rm $@

$(OUT:%=%.panda.trace):  $(ORCADEPEND)
	@ echo "#### $@ ####"
	@ $(MAKE) -f $(PREPROCESSING_MAKEFILE) PreClean
	@ $(MAKE) -f $(PREPROCESSING_MAKEFILE)               \
	  CPPFLAGS="$(CPP_ALL_FLAGS) $(CPP_PANDA_TRACE_FLAGS) $($(@:%.panda.trace=%)FLAGS)" \
	       Preprocessing
	$(OC_PANDA) $(OC_PANDA_TRACE_FLAGS) -o $@ $(SRC)
	ainstall $@ /home/$@
	rm $@


## The cleaners

less: PreClean
	rm -f .*.db
	rm -f Overlay.ps
	rm -f $(OUT:%=%.bcast)
	rm -f $(OUT:%=%.panda)
	rm -f $(OUT:%=%.panda.trace)
	rm -fr .oc_driver

clean: PreClean
	rm -f $(OUT)
	rm -f .*.db
	rm -f Overlay.ps
	rm -f $(OUT:%=%.bcast)
	rm -f $(OUT:%=%.panda)
	rm -f $(OUT:%=%.panda.trace)
	rm -fr .oc_driver


print:
	pr \
	   Main.spf P.Main.imp \
	   P.BoxModule.spf P.BoxModule.imp \
	   BoxListModule.spf BoxListModule.imp \
	   OwnMath.spf OwnMath.imp  \
	| lpr -J"Overlay"


vgrind:
	vgrind -loc -d ../.vgrindefs -h Overlay \
	       Main.spf P.Main.imp \
	       P.BoxModule.spf P.BoxModule.imp \
	       BoxListModule.spf BoxListModule.imp \
	       OwnMath.spf OwnMath.imp  \
	| devps > Overlay.ps


############################################
## Preprocessing part
##

## Do all the necessairy preprocessing

Preprocessing: $(POSTCPP)

##  Orca doesn't do preprocessing, so if we want to we must do this ourselves.
##  To ensure that the line numbering in the resulting files stays consistent
##  with unprocessed ones the $(CPP) output is also fed to a simple awk script
##  which uses the $(CPP) line number directives to insert blank lines where
##  $(CPP) has cut something away. To be able to handle a limited form of
##  include files as well the script may also cut something away.

$(POSTCPP): P.$$@
	@ echo "$(CPP) $(CPPFLAGS) P.$@ => $@"
	@ $(CPP) $(CPPFLAGS) P.$@                                  \
	  | awk '             BEGIN{ nr = 1 }                      \
	         /^# [0-9]+ "P.$@"/{ for( ; nr<$$2 ; nr++ ) print""\
				   ; skip = 0 ; next }             \
		       /^# [0-9] +/{ skip = 1 ; next }             \
				   { if( skip ) next }             \
				   { print ; nr++    }' >$@

PreClean:
	rm -f $(POSTCPP)
