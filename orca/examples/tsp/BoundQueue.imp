# (c) copyright 1995 by the Vrije Universiteit, Amsterdam, The Netherlands.
# For full copyright and restrictions on use see the file COPYRIGHT in the
# top level of the Orca distribution.

# $Id: BoundQueue.imp,v 1.2 1999/04/21 10:05:24 ceriel Exp $

GENERIC
OBJECT IMPLEMENTATION BoundQueue;
	TYPE ItemName = NODENAME OF queue;
	TYPE queue =
		GRAPH
			first, last: ItemName;
		NODES
			next: ItemName;
			data: T;
		END;

	done: boolean;  # set to true if NoMoreJobs has been invoked.
	Q: queue;  # the queue itself
	count: integer;

	OPERATION AddJob(job: T);
		p: ItemName;
	BEGIN  # add a job to the tail of the queue
	    GUARD count < MAXSZ DO
		p := ADDNODE(Q);  # add a new node to Q, return its name in p
		Q[p].data := job; # fill in data field of the new node
		IF Q.first = NIL THEN  # Is it the first node?
			Q.first := p;  # yes; assign it to global data field
		ELSE
			Q[Q.last].next := p; # no; set its next field
		FI;
		Q.last := p;  # Assign to "last" global data field
		count +:= 1;
	    OD;
	END;

	OPERATION NoMoreJobs();
	BEGIN  # Invoked to indicate that no more jobs will be added
		done := true;
	END;

	OPERATION GetJob(job: OUT T): boolean;
		p: ItemName;
	BEGIN  # Try to fetch a job from the queue
		GUARD Q.first /= NIL DO  # A job is available
			p := Q.first;  # Remove it from the queue
			Q.first := Q[p].next;
			IF Q.first = NIL THEN Q.last := NIL; FI;
			job := Q[p].data;
			DELETENODE(Q,p);  # delete the node
			count -:= 1;
			RETURN true;
		OD;

		GUARD done AND (Q.first = NIL) DO
			RETURN false; # All jobs have been done
		OD;
	END;
BEGIN
	count := 0;
	done := false;  # initialize done to false
END GENERIC;
