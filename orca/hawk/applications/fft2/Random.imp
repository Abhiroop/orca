# (c) copyright 1995 by the Vrije Universiteit, Amsterdam, The Netherlands.
# For full copyright and restrictions on use see the file COPYRIGHT in the
# top level of the Orca distribution.

# $Id: Random.imp,v 1.1 1996/04/13 08:07:43 tim Exp $

OBJECT IMPLEMENTATION Random;

# Implementation in orca of Numerical Recipes ran1() but with integer result
# in the range 0 .. 2^31 -1.
# Assume 32 bit signed integers: 1/ otherwise the 3 simple random generators
#				    overflow (or have a too small range);
#				 2/ the combination of higher/lower bits is
#				    wrong.

CONST table_size = 97;
CONST two_16     = 65536;
CONST two_15     = two_16 / 2;
CONST two_31	 = FLOAT(two_16) * FLOAT(two_15);

TYPE float_ar = ARRAY[integer] OF real;
TYPE int_ar   = ARRAY[integer] OF integer;

term : int_ar;
fac  : int_ar;
mod  : int_ar;

inv_mod : float_ar[1 .. 3];

current : int_ar[1 .. 3];

table : float_ar[1 .. table_size];


OPERATION val() : integer;
BEGIN
    RETURN(TRUNC(SELF$val01() * two_31));
END;


OPERATION val01() : real;
ix : integer;
r  : real;
BEGIN
    current[1] := (fac[1] * current[1] + term[1]) % mod[1];
    current[2] := (fac[2] * current[2] + term[2]) % mod[2];
    current[3] := (fac[3] * current[3] + term[3]) % mod[3];
    ix := 1 + (table_size * current[3]) / mod[3];
    r  := table[ix];
    table[ix] := (FLOAT(current[1]) +
		    FLOAT(current[2]) * inv_mod[2]) * inv_mod[1];
    RETURN(r);
END;


OPERATION init(seed : integer);

BEGIN
    term := int_ar:[ 54773,  28411,  51349];
    fac  := int_ar:[  7141,   8121,   4561];
    mod  := int_ar:[259200, 134456, 243000];

    ASSERT(seed >= 0);
    FOR i IN 1 .. 3 DO
	inv_mod[i] := 1.0 / FLOAT(mod[i]);
    OD;

    current[1] := (term[1] + seed) % mod[1];
    current[1] := (fac[1] * current[1] + term[1]) % mod[1];
    current[2] := current[1] % mod[2];
    current[1] := (fac[1] * current[1] + term[1]) % mod[1];
    current[3] := current[1] % mod[3];

    FOR i IN 1 .. table_size DO
	current[1] := (fac[1] * current[1] + term[1]) % mod[1];
	current[2] := (fac[2] * current[2] + term[2]) % mod[2];
	table[i]   := (FLOAT(current[1]) +
			FLOAT(current[2]) * inv_mod[2]) * inv_mod[1];
    OD;
END;

BEGIN
	SELF$init(1);
END;
