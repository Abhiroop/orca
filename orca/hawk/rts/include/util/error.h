#ifndef __RTS_ERROR_H__
#define __RTS_ERROR_H__

#include "synchronization.h"

#include <stdarg.h>

#define WARN_PERF  0
#define WARN_SEM   1
#define WARN_DEBUG 2

extern po_lock_p rts_error_lock;
/*
 * NOT STATIC, so it can be locked outside this module. This allows other
 * debugging output to be synchronized with the output generated by this
 * module.
 */


#ifdef __GNUC__
void rts_error(char *fmt, ...) __attribute__ ((noreturn, format(printf, 1, 2)));
void rts_warning(int class, char *fmt, ...) __attribute__ ((format(printf, 2, 3)));
#else
void rts_error(char *fmt, ...);
void rts_warning(int class, char *fmt, ...);
#endif

int rts_warnings_set(int w);

#ifdef TIM
#ifdef __GNUC__
void debug(char *fmt, ...) __attribute__((format(printf, 1, 2))); 
#else
void debug(char *fmt, ...); 
#endif
#endif

#endif /* __RTS_ERROR_H__ */
