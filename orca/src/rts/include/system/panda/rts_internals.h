#ifndef __RTS_INTERNALS_H__
#define __RTS_INTERNALS_H__

/* $Id: rts_internals.h,v 1.23 1996/02/14 15:36:36 ceriel Exp $ */

#include "orca_types.h"

#include <stdio.h>

#define o_refcount 			o_rtsdep->obj.total_refs
#define o_init_rtsdep(o, d, s)\
		(f_init( (fragment_p)(o), (d), (s)), \
		 f_trc_create( (fragment_p)(o), ((fragment_p)(o))->fr_name))
#define o_rts_free(o)			man_free( (fragment_p) o)
#define o_kill_rtsdep(o)		f_clear( (fragment_p)o)
#define m_free(ptr)	      do { void *p = ptr; if (p) sys_free(p);} while (0)


/* The following routines are not called directly by code generated by the
   compiler, but should be implemented by all runtime systems.
*/

extern void __Score(void *data, tp_dscr *d, 
		    double score, double naccess, double uncertainty);

extern int o_shared_nbytes(void *arg, tp_dscr *descr, int cpu);
extern char *o_shared_marshall(char *p, void *arg, tp_dscr *descr, int cpu);
extern char *o_shared_unmarshall(char *p, void **arg, tp_dscr *descr);

extern int nbytes_object( fragment_p obj);
extern char * marshall_object( char *buf, fragment_p obj);
extern char * unmarshall_object( char *buf, fragment_p obj);

extern int o_rts_nbytes( t_object *op, tp_dscr *d, int flags);
extern char *o_rts_marshall( char *p, t_object *op, tp_dscr *d, int flags);
extern char *o_rts_unmarshall( char *p, t_object *op, tp_dscr *d, int flags);


void m_syserr(char *s);
/* For internal errors.
*/

void m_liberr(char *lib, char *s);
/* For library errors, f.i. I/O.
*/

#define m_malloc(sz)	((sz) ? sys_malloc(sz) : 0)
/* Like malloc, but causes a run-time error to occur if it fails.
*/
 
#define m_realloc(ptr,sz)	(ptr ? sys_realloc(ptr,sz) : sys_malloc(sz))
/* Like realloc, but causes a run-time error to occur if it fails.
*/

void m_print(FILE *, char *, int);

#ifdef SHMEM
void *m_shmalloc(size_t);
/* Like m_alloc, but allocates shared memory.
*/

void *m_shrealloc(void *, size_t);
/* Like m_realloc, but allocates shared memory.
*/

void m_shfree(void *);
/* Like free, but frees shared memory.
*/

void m_shareprop(void *p, tp_dscr *d, int sh);
/* Propagate shared memory information 'sh' over the datastructure indicated
   by 'p'. This structure has type 'd'.
*/

#define myalloc(a,b)	((b) ? m_shmalloc(a) : m_malloc(a))
#define myrealloc(a,b,c) \
			((c) ? m_shrealloc(a, b) : m_realloc(a, b))
#define myfree(a,b)	((b) ? (m_shfree(a),0) : (m_free(a),0))
#define SHARE_PROP(a,b,c) \
			m_shareprop(a, b, c)

#else

#define myalloc(a,b)	m_malloc(a)
#define myrealloc(a,b,c) \
			m_realloc(a, b)
#define myfree(a,b)	m_free(a)
#define SHARE_PROP(a,b,c)
#endif

#endif
