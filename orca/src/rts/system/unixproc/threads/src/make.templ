# To create various versions, redefine on the command line:
#
# Compilation:
#       EXT_FLAGS    : extra flags for the C compiler
#       DEFINES      : extra flags for the C preprocessor
#	INCLUDES     : -I options to find include files
#
# Installation:
# Use this file as a template for a Makefile for a specific architecture.
# This generated Makefile resides in the INSTALL directory.
#	INSTALL      : the directory where the lib*.a file is maintained
#       CONFMAKEFILE : the path name of the generated file that contains
#                      the dependencies
#
# General:
#	ORCA_HOME    : the root of the Orca tree

					# Standard programs
AR		= ar
ARFLAGS		= r
CHMOD		= chmod
CHMODFLAGS	= ug+rw
RANLIB		= ranlib
TAGS		= etags
RM		= /bin/rm
EX		= ex
MAKEDEPEND	= makedepend

CC		= gcc

CPPFLAGS = \
		$(INCLUDES) \
		-I. \
		$(DEFINES) \
		-DNOERR_CHECK -DC_INTERFACE -DSTACK_CHECK -DSIGNAL_STACK

CFLAGS		= \
		$(EXT_FLAGS)


					# set FORCE to ALWAYS if you want to
					# recompile everything
FORCE		=

					# This module <-------------
MODULE		= threads

PWD		= $(ORCA_HOME)/src/rts/system/unixproc/threads/src
INSTALL		= .			# Must choose some default...

CONFMAKEFILE	= $(INSTALL)/Makefile.$(MODULE)

TARGETLIB =	lib$(MODULE).a
TARGET		= $(INSTALL)/$(TARGETLIB)
LIB_TARGET	= $(TARGET)



					# The source files <------
SRC		= \
		cond.c \
		io.c \
		pthread.c \
		signal.c \
		mutex.c \
		pthread_init.c \
		queue.c \
		stack.c \
		pthread_disp.c

PWD_SRC		= $(SRC:%.c=$(PWD)/%.c) $(PWD)/pthread_sched.S

OBJ_DIR		= ${MODULE}_obj
OBJECTS		= $(SRC:%.c=${OBJ_DIR}/%.o) ${OBJ_DIR}/pthread_sched.o

O_FILES		= $(SRC:%.c=%.o) pthread_sched.o

LIB_OBJECTS	= $(SRC:%.c=$(LIB_TARGET)(%.o)) $(LIB_TARGET)(pthread_sched.o)

# two possible ways of compiling: either with .o files in a sub-directory
# or with rules for making directly into the lib...a. The latter is more
# space-efficient, but also slower.
# Choose "target" and "depend" if you want the sub-directory version,
# "lib_target" and "lib_depend" if you want the direct version.

default:	target

ALWAYS::

target:		${OBJ_DIR} ${TARGET}

${OBJ_DIR}/%.o:	${PWD}/%.c $(FORCE)
		${COMPILE.c} ${PWD}/$*.c
		@/bin/mv $*.o ${OBJ_DIR}/$*.o
		@-${CHMOD} ${CHMODFLAGS} ${OBJ_DIR}/$*.o

$(OBJ_DIR)/pthread_sched.o: \
		$(PWD)/pthread_sched.S $(FORCE)
		$(COMPILE.c) -o ${OBJ_DIR}/pthread_sched.o $(PWD)/pthread_sched.S
		@-${CHMOD} ${CHMODFLAGS} ${OBJ_DIR}/pthread_sched.o

${TARGET}: 	${OBJECTS}
		@-${AR} ${ARFLAGS} ${TARGET} ${OBJECTS}
		@-${RANLIB} ${TARGET}
		@-${CHMOD} ${CHMODFLAGS} ${TARGET}

${OBJ_DIR}::
		@if test \! -d $@ ; \
		then \
			mkdir $@ ; \
			${CHMOD} ug+rwx $@ ; \
		fi

depend:		pthread_offsets.h
		@/bin/cp ${PWD}/make.templ ${CONFMAKEFILE}
		${MAKEDEPEND}	-f${CONFMAKEFILE} \
				${CPPFLAGS} \
				${PWD_SRC}
		@-(echo '%s/^[A-Za-z_][A-Za-z_0-9]*\.o:/$${OBJ_DIR}\/&'; \
		   echo wq) | ${EX} - ${CONFMAKEFILE}
		@-${CHMOD} ${CHMODFLAGS} ${CONFMAKEFILE}
		@-${RM} -f ${CONFMAKEFILE}.bak

clean:		
		-${RM} -f pthread_offsets.h get_offsets
		-$(RM) -f $(OBJECTS) $(O_FILES) *.bak

# Make rules for making directly into the lib...a

$(LIB_TARGET)(%.o) : $(PWD)/%.c $(FORCE)
		$(COMPILE.c) -o $% $(PWD)/$*.c
		@-$(AR) $(ARFLAGS) $(LIB_TARGET) $%
		@-$(RM) -f $%

$(LIB_TARGET)(pthread_sched.o): \
		$(PWD)/pthread_sched.S $(FORCE)
		$(COMPILE.c) -o $% $(PWD)/pthread_sched.S
		@-$(AR) $(ARFLAGS) $(LIB_TARGET) $%
		@-$(RM) $%

lib_target:	$(LIB_OBJECTS)
		@-$(RANLIB) $(LIB_TARGET)
		@-$(CHMOD) $(CHMODFLAGS) $(LIB_TARGET)

lib_depend:	pthread_offsets.h
		/bin/cp $(PWD)/make.templ $(CONFMAKEFILE)
		${MAKEDEPEND}	-f${CONFMAKEFILE} \
				${CPPFLAGS} \
				${PWD_SRC}
		@-(echo '%s/^[A-Za-z_][A-Za-z_0-9]*\.o/$$(TARGET)(&)'; \
		   echo wq) | ${EX} - ${CONFMAKEFILE}
		@-$(CHMOD) $(CHMODFLAGS) $(CONFMAKEFILE)
		@-${RM} ${CONFMAKEFILE}.bak

lib_clean:	clean
		-$(AR) d $(LIB_TARGET) $(O_FILES)

.PRECIOUS:	$(TARGET)


tags:	
		$(TAGS) -t $(SRC)

pthread_offsets.h: \
		get_offsets
		get_offsets > pthread_offsets.h

get_offsets:	$(PWD)/get_offsets.c
		$(LINK.c) -o get_offsets $(PWD)/get_offsets.c

# DO NOT DELETE THIS LINE -- make depend depends on it.
