/*
 * (c) copyright 1995 by the Vrije Universiteit, Amsterdam, The Netherlands.
 * For full copyright and restrictions on use see the file COPYRIGHT in the
 * top level of the Panda distribution.
 */

/* Fragment buffer implementation as an array of num_bufs, one num_buf for each
 * platform.
 * Indexed by [sender,unfragmented_id].
 */


#ifndef __PAN_GRP_FRAG_CI__
#define __PAN_GRP_FRAG_CI__


#include <stdlib.h>

#include "pan_sys.h"

#include "grp_msg_buf.ci"
#include "grp_frag.h"



/* Implementation as an array of msg_buf's */


struct FRAG_BUF_T {
    int		size;
    msg_buf_p	buf;
};




STATIC_CI pan_msg_p
pan_grp_fb_locate(frag_buf_p frag_buf, int sender, int id)
{
    msg_buf_p buf = &frag_buf->buf[sender];

    if (id < buf->last || id >= buf->last + buf->size) {
	return NULL;
    }
    return BUF(buf, id);
}


STATIC_CI pan_msg_p
pan_grp_fb_delete(frag_buf_p frag_buf, int sender, int id)
{
    return buf_get_no(&frag_buf->buf[sender], id);
}


STATIC_CI boolean
pan_grp_fb_store(frag_buf_p frag_buf, int sender, int id, pan_msg_p msg)
{
    return buf_put_no(&frag_buf->buf[sender], msg, id);
}


STATIC_CI frag_buf_p
pan_grp_fb_create(int frag_buf_size, int n_members)
{
    frag_buf_p frag_buf;
    int        i;

    frag_buf      = pan_malloc(sizeof(frag_buf_t));
    frag_buf->buf = pan_malloc(n_members * sizeof(msg_buf_t));

    for (i = 0; i < n_members; i++) {
	pan_msg_buf_init(&frag_buf->buf[i], frag_buf_size);
    }
    frag_buf->size = n_members;

    return frag_buf;
}


STATIC_CI int
pan_grp_fb_clear(frag_buf_p frag_buf)
{
    int        i;
    int        n;

    n = 0;
    for (i = 0; i < frag_buf->size; i++) {
	n += pan_msg_buf_clear(&frag_buf->buf[i]);
    }

    pan_free(frag_buf->buf);
    pan_free(frag_buf);

    return n;
}


#endif
