/*
 * (c) copyright 1995 by the Vrije Universiteit, Amsterdam, The Netherlands.
 * For full copyright and restrictions on use see the file COPYRIGHT in the
 * top level of the Panda distribution.
 */

/* Circular message buffer implementation.
 *
 * put() at buf->next, get() at buf->last.
 *
 * The implementation increases the size to a power of two for cheap MOD
 * operations.
 */


#ifndef __PAN_GRP_MSG_BUF_CI__
#define __PAN_GRP_MSG_BUF_CI__


#include <stdlib.h>

#include "pan_sys.h"

#include "grp_global.h"
#include "grp_msg_buf.h"



/* Interface get_no and put_no:
 * msg_buf->next indicates 1+the highest present index.
 */

STATIC_CI pan_msg_p
buf_get_no(msg_buf_p buf, int idx)
{
    pan_msg_p  msg;

    if (idx < buf->last || idx >= buf->next) {
	return NULL;
    }

    msg = BUF(buf, idx);
    BUF(buf, idx) = NULL;

    while (buf->last < buf->next && BUF(buf, buf->last) == NULL) {
	buf->last++;
    }

    return msg;
}


STATIC_CI boolean
buf_no_acceptable(msg_buf_p buf, int idx)
{
    return ((buf->last == buf->next && buf->size > 0) ||
	    (idx >= buf->next - buf->size && idx < buf->last + buf->size));
}



STATIC_CI boolean
buf_put_no(msg_buf_p buf, pan_msg_p msg, int idx)
{
    if (! buf_no_acceptable(buf, idx)) {
	return FALSE;
    }
    if (BUF(buf, idx) != NULL) {
	return FALSE;
    }

    BUF(buf, idx) = msg;

    if (buf->last == buf->next) {
	buf->last = idx;
	buf->next = idx + 1;
    } else {
	if (idx < buf->last) {
	    buf->last = idx;
	}
	if (idx >= buf->next) {
	    buf->next = idx + 1;
	}
    }

    return TRUE;
}





STATIC_CI void
pan_msg_buf_init(msg_buf_p msg_buf, int size)
{
    int          i;

    size = pan_grp_upround_twopower(size);
    msg_buf->buf = pan_malloc(size * sizeof(pan_msg_p));

    msg_buf->size = size;
    for (i = 0; i < size; i++) {
	msg_buf->buf[i]= NULL;
    }
    msg_buf->last = 0;
    msg_buf->next = 0;
}




STATIC_CI int
pan_msg_buf_clear(msg_buf_p msg_buf)
{
    int        i;
    int        n;

    n = 0;
    for (i = 0; i < msg_buf->size; i++) {
	if (msg_buf->buf[i] != NULL) {
	    pan_msg_clear(msg_buf->buf[i]);
	    ++n;
	}
    }

    pan_free(msg_buf->buf);

    return n;
}


#endif
