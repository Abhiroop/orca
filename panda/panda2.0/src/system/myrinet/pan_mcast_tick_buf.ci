/*
 * (c) copyright 1995 by the Vrije Universiteit, Amsterdam, The Netherlands.
 * For full copyright and restrictions on use see the file COPYRIGHT in the
 * top level of the Panda distribution.
 */



#include <stdlib.h>
#include <assert.h>

#include "pan_sys_msg.h"

#include "pan_mcast_tick_buf.h"


#ifndef STATIC_CI
#  define STATIC_CI	static
#endif

#ifdef __GNUC__
#  define INLINE	__inline__
#else
#  define INLINE
#endif




#ifdef RELIABLE_NETWORK



/* Linked list message buffer implementation: the buffer cannot be fixed size,
 * since there is no mechanism to cope with overflow.
 *
 * pan_tick_buf_last()	returns the lowest-numbered msg that has not yet
 *			been retrieved. This message need not have arrived,
 *			in which case NULL is returned.
 * Interface:
 * accept() at numbered entry, get() at buf_last().
 *
 * Shortcut for the common case that the buffer is empty, and the next-to-
 * be-expected msg arrives: advance().
 */


#define mcast_hdr(msg)	((pan_mcast_hdr_p)msg_comm_hdr(msg))



STATIC_CI INLINE int
pan_tick_buf_last_accept(pan_tick_buf_p buf)
{
    return buf->last;
}





STATIC_CI INLINE pan_msg_p
pan_tick_buf_get(pan_tick_buf_p buf)
{
    pan_msg_p      msg;

    if (buf->list != NULL) {
	msg = buf->list;

	if (mcast_hdr(msg)->seqno != buf->last) {
					/* buf->last is missing */
	    return NULL;
	}

					/* Dequeue the front msg */
	buf->list = msg->next;

	++buf->last;

	return msg;

    } else {
					/* The front msg is not the next
					 * to be delivered */
	return NULL;
    }
}



STATIC_CI void
pan_tick_buf_accept(pan_tick_buf_p buf, pan_msg_p msg, int idx)
{
    pan_msg_p scan;
    pan_msg_p prev;

    assert(idx >= buf->last);

    scan = buf->list;
    prev = NULL;
    while (scan != NULL && mcast_hdr(scan)->seqno < idx) {
	prev = scan;
	scan = scan->next;
    }

    if (prev == NULL) {
					/* insert at front */
	buf->list = msg;
    } else {
	prev->next = msg;
    }
    msg->next = scan;
}


STATIC_CI INLINE int
pan_tick_buf_advance(pan_tick_buf_p buf, int seqno)
{
    if (seqno == buf->last) {
				/* Bingo. Take the shortcut. */
	buf->last++;

	return 1;
    } else {
	return 0;
    }
}



STATIC_CI pan_tick_buf_p
pan_tick_buf_create(int size)
{
    pan_tick_buf_p buf;

    buf = pan_malloc(sizeof(pan_tick_buf_t));

    buf->last = 0;
    buf->list = NULL;

    return buf;
}




STATIC_CI int
pan_tick_buf_clear(pan_tick_buf_p buf, void (*msg_clear)(pan_msg_p msg))
{
    pan_msg_p scan;
    pan_msg_p next;
    int       n;
    
    n = 0;
    scan = buf->list;
    while (scan != NULL) {
	next = scan->next;
	if (msg_clear != NULL) {
	    msg_clear(scan);
	}
	++n;
	scan = next;
    }

    pan_free(buf);

    return n;
}



#else		/* RELIABLE_NETWORK */



/* Circular message buffer implementation.
 *
 * pan_tick_buf_last()	returns the lowest-numbered msg that has not yet
 *			been retrieved. This message need not have arrived,
 *			in which case NULL is returned.
 * Interface:
 * accept() at numbered entry, get() at buf_last().
 *
 * Shortcut for the common case that the buffer is empty, and the next-to-
 * be-expected msg arrives: advance().
 *
 * Extra field for msgs that are out of order: the ticks field. The
 * intermediate tick fields are set to a certain value when an out-of-order
 * msg arrives.
 * The sweeper decreases this tick field, and issues a retransmit request
 * when a tick field has become zero.
 *
 * The implementation increases the size to a power of two for cheap MOD
 * operations.
 */




STATIC_CI INLINE int
TICK_BUFMOD(pan_tick_buf_p tick_buf, int idx)
{
    return idx & (tick_buf->size - 1);
}


STATIC_CI INLINE pan_tick_msg_p
TICK_BUF(pan_tick_buf_p tick_buf, int idx)
{
    return &tick_buf->buf[TICK_BUFMOD(tick_buf, idx)];
}


STATIC_CI INLINE int
pan_tick_buf_ticks(pan_tick_buf_p tick_buf, int idx)
{
    return TICK_BUF(tick_buf, idx)->ticks;
}


STATIC_CI INLINE void
pan_tick_buf_ticks_set(pan_tick_buf_p tick_buf, int idx, int val)
{
    TICK_BUF(tick_buf, idx)->ticks = val;
}


STATIC_CI INLINE int
pan_tick_buf_ticks_dec(pan_tick_buf_p tick_buf, int idx)
{
    return --(TICK_BUF(tick_buf, idx)->ticks);
}



STATIC_CI INLINE int
pan_tick_buf_in_range(pan_tick_buf_p buf, int idx)
{
    return (idx >= buf->last && idx < buf->last + buf->size);
}


STATIC_CI INLINE int
pan_tick_buf_upb(pan_tick_buf_p buf)
{
    return buf->last + buf->size;
}


STATIC_CI INLINE int
pan_tick_buf_in_use(pan_tick_buf_p buf, int idx)
{
    assert(pan_tick_buf_in_range(buf, idx));
    return (TICK_BUF(buf, idx)->msg != NULL);
}


STATIC_CI INLINE int
pan_tick_buf_last_accept(pan_tick_buf_p buf)
{
    return buf->last;
}



STATIC_CI INLINE pan_msg_p
pan_tick_buf_get(pan_tick_buf_p buf)
{
    pan_msg_p      msg;
    pan_tick_msg_p elt;

    elt = TICK_BUF(buf, buf->last);
    msg = elt->msg;

    if (msg != NULL) {
					/* This is the non-default case where
					 * msgs have arrived out of order. */

	elt->msg = NULL;
	elt->ticks = -1;

	++buf->last;
    }

    return msg;
}



STATIC_CI void
pan_tick_buf_accept(pan_tick_buf_p buf, pan_msg_p msg, int idx)
{
    pan_tick_msg_p elt;

    elt = TICK_BUF(buf, idx);

    assert(pan_tick_buf_in_range(buf, idx));
    assert(elt->msg == NULL);

    elt->msg  = msg;
    elt->ticks = -1;
}


STATIC_CI INLINE int
pan_tick_buf_advance(pan_tick_buf_p buf, int seqno)
{
    if (seqno == buf->last) {
				/* Bingo. Take the shortcut. */
	buf->last++;

	return 1;
    } else {
	return 0;
    }
}



STATIC_CI pan_tick_buf_p
pan_tick_buf_create(int size)
{
    pan_tick_buf_p buf;
    int            i;
    unsigned int   two_power;

    buf = pan_malloc(sizeof(pan_tick_buf_t));

    two_power = 1;
    while (two_power < size) {
	two_power *= 2;
    }
    buf->buf   = pan_malloc(two_power * sizeof(pan_tick_msg_t));

    buf->size = two_power;
    for (i = 0; i < two_power; i++) {
	buf->buf[i].msg  = NULL;
	buf->buf[i].ticks = -1;
    }

    buf->last = 0;

    return buf;
}




STATIC_CI int
pan_tick_buf_clear(pan_tick_buf_p buf, void (*msg_clear)(pan_msg_p msg))
{
    int        i;
    int        n;

    n = 0;
    for (i = 0; i < buf->size; i++) {
	if (buf->buf[i].msg != NULL) {
	    if (msg_clear != NULL) {
		msg_clear(buf->buf[i].msg);
	    }
	    ++n;
	}
    }

    pan_free(buf->buf);

    pan_free(buf);

    return n;
}



#endif		/* RELIABLE_NETWORK */
